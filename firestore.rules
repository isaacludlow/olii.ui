rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /usernames/{userId} {
      allow read;
    }

    match /users/{userId} {
    	allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && isOwner(request, userId)
        && request.resource.data.keys().hasAll(['email', 'phoneNumber', 'dob', 'username'])
        && request.resource.data.keys().hasOnly(['email', 'phoneNumber', 'dob', 'username'])
        && request.resource.data.email is string
        // && request.resource.data.dob is timestamp
        // && request.resource.data.phoneNumber is int
        && request.resource.data.username is string;

      allow update: if isAuthenticated(request)
        && isOwner(request, userId)
        && request.resource.data.keys().hasAll(['email', 'phoneNumber', 'dob', 'username'])
        && request.resource.data.keys().hasOnly(['email', 'phoneNumber', 'dob', 'username'])
        && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'username'])
        && request.resource.data.email is string
        // && request.resource.data.dob is timestamp
        // && request.resource.data.phoneNumber is int
        && request.resource.data.username is string;

      allow delete: if isAuthenticated(request)
        && isOwner(request, userId);
    }

    match /profiles/{profileId} {
      allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && isOwner(request, profileId)
        && isProfileDataValid(request.resource.data);
      
      allow update: if isAuthenticated(request)
        && isOwner(request, profileId)
        && isProfileDataValid(request.resource.data);

      allow delete: if isAuthenticated(request)
        && isOwner(request, profileId);

      match /myEvents/{myEventId} {
        allow read: if isAuthenticated(request);

        allow write: if false; // These are created, updated, and deleted by cloud functions. Never by the user.
      }

      match /myGroups/{myGroupId} {
        allow read: if isAuthenticated(request);

        allow write: if false; // These are created, updated, and deleted by cloud functions. Never by the user.
      }

      function isProfileDataValid(requestData) {
      // Require first and last name. All other fields are optional.
      return (requestData.keys().hasAll(['firstName', 'lastName']))
        && (requestData.keys().hasOnly(
          ['firstName', 'lastName', 'bio', 'homeCountry', 'hostCountry', 'currentCity', 'imageUrls', 'profilePictureUrl', 'savedImagesAlbumsPreview', 'friends']
        ))
        && requestData.firstName is string
        && requestData.lastName is string
        && requestData.get('bio', '') is string
        && requestData.get('homeCountry', '') is string
        && requestData.get('hostCountry', '') is string
        && requestData.get('currentCity', '') is string
        && requestData.get('imageUrls', []) is list
        && requestData.get('profilePictureUrl', '') is string
      }

      match /savedImagesAlbums/{albumId} {
        allow read: if isAuthenticated(request)
          && isPublic(resource);

          allow write: if isAuthenticated(request)
            && isOwner(request, profileId)

        function isPublic(resource) {
          return resource.data.privacyLevel == 'public';
        }
      }
    }

    match /events/{eventId} {
      allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && (isEventCreator(request, request.resource) || isGroupAdmin(request, request.resource.data.creator.creatorId))
        && isEventDataValid(request.resource.data);

      allow update: if isAuthenticated(request)
        && (isEventCreator(request, request.resource) || isGroupAdmin(request, request.resource.data.creator.creatorId))
        && isEventDataValid(request.resource.data);

      allow delete: if isAuthenticated(request)
        && (isEventCreator(request, request.resource) || isGroupAdmin(request, get(request.path).data.creator.creatorId));

      function isEventDataValid(requestData) {
        return requestData.keys().hasAll(
            ['coverImageUrl', 'creator', 'date', 'description', 'privacyLevel', 'title']
          )
          && requestData.keys().hasOnly(
            ['attendeesPreview', 'coverImageUrl', 'creator', 'date', 'description', 'imageUrls', 'location', 'privacyLevel', 'title']
          )
          && requestData.attendeesPreview is list
          && requestData.coverImageUrl is string
          && requestData.creator is map
          && requestData.creator.creatorId is string
          && requestData.creator.creatorType is string
          && requestData.creator.displayName is string
          && requestData.creator.imageUrl is string
          && requestData.date is timestamp
          && requestData.description is string
          && requestData.imageUrls is list
          && requestData.location is map
          && requestData.location.coordinates is latlng
          && requestData.location.displayName is string
          && requestData.privacyLevel is string
          && requestData.title is string;
      }

      match /attendees/{attendeeId} {
        allow read: if isAuthenticated(request);

        allow write: if isAuthenticated(request)
          && isOwner(request, attendeeId);
      }
    }

    match /groups/{groupdId} {
      allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && isGroupDataValid(request.resource.data);

      allow update: if isAuthenticated(request)
        && isGroupDataValid(request.resource.data)
        && isOwner(request, request.resource.data.admins[0].profileId);

      allow delete: if isAuthenticated(request)
        && isOwner(request, request.resource.data.admins[0].profileId);

      function isGroupDataValid(requestData) {
        return requestData.keys().hasAll(['admins', 'coverImageUrl', 'description', 'name', 'privacyLevel', 'totalMembers'])
          && requestData.keys().hasOnly(
            ['admins', 'coverImageUrl', 'description', '', 'name', 'privacyLevel', 'totalMembers']
          )
          && requestData.admins is list
          && isProfilePreviewDataValid(requestData.admins[0])
          && requestData.coverImageUrl is string
          && requestData.description is string
          && requestData.name is string
          && requestData.privacyLevel is string
          && requestData.totalMembers is int
          && requestData.totalMembers == 0;
      }

      match /events/{eventId} {
        allow read: if isAuthenticated(request);

        allow create: if isAuthenticated(request) && isOwner(request, request.resource.data.profileId);

        allow update: if isAuthenticated(request) && isOwner(request, resource.data.profileId);

        allow delete: if isAuthenticated(request) && isOwner(request, get(request.path).profileId);
      }

      match /members/{memberId} {
        allow read: if isAuthenticated(request);

        allow create: if isAuthenticated(request) && isOwner(request, request.resource.data.profileId);

        allow update: if isAuthenticated(request) && isOwner(request, resource.data.profileId);

        allow delete: if isAuthenticated(request) && isOwner(request, get(request.path).profileId);
      }
    }

    match /group_posts/{group_postId} {
      allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && isGroupPostDataValid(request.resource.data);

      allow update: if isAuthenticated(request)
        && isGroupPostDataValid(request.resource.data)
        && isOwner(request, request.resource.data.author.profileId);

      allow delete: if isAuthenticated(request)
        && (isOwner(request, get(request.path).data.author.profileId) || isGroupAdmin(request, get(request.path).data.groupPreview.groupId));

      function isGroupPostDataValid(requestData) {
        return requestData.keys().hasAll(['author', 'content', 'date', 'groupPreview'])
          && requestData.keys().hasOnly(
            ['author', 'content', 'date', 'groupPreview', 'imageUrls']
          )
          && isProfilePreviewDataValid(requestData.author)
          && requestData.content is string
          && requestData.date is timestamp
          && requestData.groupPreview is map
          && requestData.groupPreview.groupId is string
          && requestData.groupPreview.coverImageUrl is string
          && requestData.groupPreview.name is string
          && requestData.get('imageUrls', []) is list;
      }
    }

    match /group_posts/{group_postId}/comments/{commentId} {
      allow read: if isAuthenticated(request);

      allow create: if isAuthenticated(request)
        && isGroupPostCommentDataValid(request.resource.data);

      allow update: if isAuthenticated(request)
        && isGroupPostCommentDataValid(request.resource.data)
        && isOwner(request, request.resource.data.author.profileId);

      allow delete: if isAuthenticated(request)
        && (isOwner(request, request.resource.data.author.profileId) || isGroupAdmin(request, request.resource.data.groupPreview.groupId));

      function isGroupPostCommentDataValid(requestData) {
        return requestData.keys().hasAll(['author', 'content', 'date'])
          && isProfilePreviewDataValid(requestData.author)
          && requestData.content is string
          && requestData.date is timestamp
      }
    }
    
    function isAuthenticated(request) {
    	return request.auth != null;// && request.auth.token.email_verified;
    }

    function isOwner(request, userId) {
      return request.auth.uid == userId;
    }

    function isEventCreator(request, resource) {
      return request.auth.uid == resource.data.creator.creatorId;
    }

    function isGroupAdmin(request, groupId) {
      let userUid = request.auth.uid;
      let isGroupAdmin = get(/databases/$(database)/documents/profiles/$(userUid)/myGroups/$(groupId)).data.isAdmin;

      return isGroupAdmin;
    }

    function isProfilePreviewDataValid(profilePreviewData) {
      return profilePreviewData is map
        && profilePreviewData.profileId is string
        && profilePreviewData.firstName is string
        && profilePreviewData.lastName is string
        && profilePreviewData.profilePictureUrl is string;
    }
  }
}